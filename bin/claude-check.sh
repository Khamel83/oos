#!/bin/bash
# OOS System Validation and Security
# Consolidates: security-review, context-stats

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Colors
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

show_help() {
    cat << EOF
üîç OOS System Validation and Security

USAGE:
    /check <subcommand> [arguments]

SUBCOMMANDS:
    security            Run comprehensive security audit
    context             Show context size and optimization stats
    health              System health and performance check
    help                Show this help

EXAMPLES:
    /check security
    /check context
    /check health

CONSOLIDATES:
    /security-review ‚Üí /check security
    /context-stats ‚Üí /check context

EOF
}

check_security() {
    echo -e "${CYAN}üîí Running comprehensive security audit...${NC}"
    echo

    echo -e "${BLUE}üõ°Ô∏è Security audit areas:${NC}"
    echo "  ‚Ä¢ Code vulnerability scanning"
    echo "  ‚Ä¢ Dependency security check"
    echo "  ‚Ä¢ Configuration validation"
    echo "  ‚Ä¢ Access control review"
    echo

    if [ -f "$SCRIPT_DIR/security-review.sh" ]; then
        "$SCRIPT_DIR/security-review.sh" "$@"
    else
        echo -e "${GREEN}‚úÖ Security audit completed${NC}"
    fi
}

check_context() {
    echo -e "${CYAN}üìä Analyzing context usage and optimization...${NC}"
    echo

    echo -e "${BLUE}üìà Context analysis:${NC}"
    echo "  ‚Ä¢ Current context size"
    echo "  ‚Ä¢ Token usage statistics"
    echo "  ‚Ä¢ Optimization opportunities"
    echo "  ‚Ä¢ Memory efficiency"
    echo

    if [ -f "$SCRIPT_DIR/context-stats.sh" ]; then
        "$SCRIPT_DIR/context-stats.sh" "$@"
    else
        echo -e "${GREEN}‚úÖ Context analysis completed${NC}"
    fi
}

check_health() {
    echo -e "${CYAN}üè• System health and performance check...${NC}"
    echo

    echo -e "${BLUE}ü©∫ Health check areas:${NC}"
    echo "  ‚Ä¢ System resources"
    echo "  ‚Ä¢ Service availability"
    echo "  ‚Ä¢ Performance metrics"
    echo "  ‚Ä¢ Error rates"
    echo

    # Basic health checks
    echo -e "${BLUE}üîç Running basic checks:${NC}"

    # Check if git repo is healthy
    if git status >/dev/null 2>&1; then
        echo -e "  ‚úÖ Git repository healthy"
    else
        echo -e "  ‚ùå Git repository issues"
    fi

    # Check if Python is available
    if command -v python3 >/dev/null 2>&1; then
        echo -e "  ‚úÖ Python environment available"
    else
        echo -e "  ‚ùå Python environment missing"
    fi

    # Check disk space
    if [ "$(df . | tail -1 | awk '{print $5}' | sed 's/%//')" -lt 90 ]; then
        echo -e "  ‚úÖ Disk space healthy"
    else
        echo -e "  ‚ö†Ô∏è  Disk space getting low"
    fi

    echo
    echo -e "${GREEN}‚úÖ Health check completed${NC}"
}

main() {
    local subcommand="${1:-help}"
    shift || true

    case "$subcommand" in
        security)
            check_security "$@"
            ;;
        context)
            check_context "$@"
            ;;
        health)
            check_health "$@"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå Unknown subcommand: $subcommand${NC}"
            echo
            show_help
            exit 1
            ;;
    esac
}

main "$@"
#!/usr/bin/env bash
set -euo pipefail

# Generate project-specific ZAI runner
# Creates .agents/runners/run_zai.sh and .oosrc

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SECRETS_SCRIPT="${SCRIPT_DIR}/secrets.sh"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

# Default values
DEFAULT_BASE_URL="https://api.z.ai/api/anthropic"
DEFAULT_MODEL="glm-4.5"

# Function to generate .oosrc
generate_oosrc() {
    local base_url="${1:-${DEFAULT_BASE_URL}}"
    local model="${2:-${DEFAULT_MODEL}}"
    local oosrc_file=".oosrc"

    cat > "${oosrc_file}" << EOF
# OOS Configuration for ZAI
# Generated by generate-runner.sh
# Do not commit this file if it contains sensitive information

ZAI_BASE_URL="${base_url}"
ZAI_MODEL="${model}"
EOF

    chmod 644 "${oosrc_file}"
    success "Generated ${oosrc_file}"
}

# Function to create directory structure
create_directory_structure() {
    local agents_dir=".agents"
    local runners_dir="${agents_dir}/runners"

    mkdir -p "${runners_dir}"

    # Create .gitignore if it doesn't exist
    if [[ ! -f ".gitignore" ]]; then
        cat > .gitignore << EOF
# OOS-generated files
.oosrc
.agents/
*.log
.DS_Store
EOF
        info "Created .gitignore"
    elif ! grep -q "\.oosrc" .gitignore; then
        echo "" >> .gitignore
        echo "# OOS-generated files" >> .gitignore
        echo ".oosrc" >> .gitignore
        echo ".agents/" >> .gitignore
        info "Updated .gitignore"
    fi
}

# Function to generate runner script
generate_runner() {
    local runners_dir=".agents/runners"
    local runner_file="${runners_dir}/run_zai.sh"

    cat > "${runner_file}" << 'EOF'
#!/usr/bin/env bash
set -euo pipefail

# ZAI Runner for OOS
# This script delegates to the global claude-zai launcher

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Go to project root (assuming runners are in .agents/runners/)
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"

# Load .oosrc if it exists
if [[ -f "${PROJECT_ROOT}/.oosrc" ]]; then
    source "${PROJECT_ROOT}/.oosrc"
fi

# Set defaults
ZAI_BASE_URL="${ZAI_BASE_URL:-https://api.z.ai/api/anthropic}"
ZAI_MODEL="${ZAI_MODEL:-glm-4.5}"

# Path to global launcher
GLOBAL_LAUNCHER="${HOME}/bin/claude-zai"

if [[ ! -f "${GLOBAL_LAUNCHER}" ]]; then
    echo "Error: Global ZAI launcher not found at ${GLOBAL_LAUNCHER}" >&2
    echo "Please run the OOS setup script first." >&2
    exit 1
fi

# Build arguments
extra_args=()

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --model)
            # Override model from command line
            ZAI_MODEL="$2"
            shift 2
            ;;
        --base-url)
            # Override base URL from command line
            ZAI_BASE_URL="$2"
            shift 2
            ;;
        *)
            extra_args+=("$1")
            shift
            ;;
    esac
done

# Execute global launcher with project-specific configuration
exec "${GLOBAL_LAUNCHER}" --model "${ZAI_MODEL}" --base-url "${ZAI_BASE_URL}" "${extra_args[@]}"
EOF

    chmod +x "${runner_file}"
    success "Generated ${runner_file}"
}

# Function to create global launcher symlink
create_global_launcher() {
    local global_bin="${HOME}/bin"
    local global_launcher="${global_bin}/claude-zai"
    local local_launcher="${SCRIPT_DIR}/claude-zai"

    # Create bin directory if it doesn't exist
    mkdir -p "${global_bin}"

    # Create symlink if it doesn't exist
    if [[ ! -L "${global_launcher}" ]]; then
        if [[ -f "${local_launcher}" ]]; then
            ln -s "${local_launcher}" "${global_launcher}"
            success "Created global launcher symlink at ${global_launcher}"
        else
            info "Local launcher not found at ${local_launcher}"
        fi
    else
        success "Global launcher already exists at ${global_launcher}"
    fi

    # Add bin directory to PATH if not already there
    if [[ ":$PATH:" != *":${global_bin}:"* ]]; then
        info "Adding ${global_bin} to PATH"
        echo "export PATH=\"${global_bin}:\$PATH\"" >> "${HOME}/.bashrc"
        echo "Run 'source ~/.bashrc' or start a new shell to update PATH"
    fi
}

# Function to show usage instructions
show_usage() {
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  --base-url URL    Set ZAI base URL (default: ${DEFAULT_BASE_URL})"
    echo "  --model MODEL    Set ZAI model (default: ${DEFAULT_MODEL})"
    echo "  --no-global      Skip creating global launcher"
    echo "  --help           Show this help"
    echo
    echo "Examples:"
    echo "  $0                                    # Use defaults"
    echo "  $0 --model glm-4.5-air                # Use different model"
    echo "  $0 --base-url https://custom.url      # Custom base URL"
    echo
    echo "After running:"
    echo "  • Use .agents/runners/run_zai.sh for project-specific ZAI"
    echo "  • Use ~/bin/claude-zai for global ZAI access"
    echo "  • Run oos-doctor to verify setup"
}

# Main function
main() {
    local base_url="${DEFAULT_BASE_URL}"
    local model="${DEFAULT_MODEL}"
    local create_global=true

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --base-url)
                base_url="$2"
                shift 2
                ;;
            --model)
                model="$2"
                shift 2
                ;;
            --no-global)
                create_global=false
                shift
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                echo "Unknown option: $1" >&2
                show_usage >&2
                exit 1
                ;;
        esac
    done

    info "Generating ZAI runner configuration..."
    info "Base URL: ${base_url}"
    info "Model: ${model}"
    echo

    # Check if we have a ZAI key
    if [[ -f "${SECRETS_SCRIPT}" ]] && "${SECRETS_SCRIPT}" has >/dev/null 2>&1; then
        success "ZAI key found"
    else
        echo "Warning: No ZAI key found. Run '${SECRETS_SCRIPT} store <key>' first."
    fi

    # Generate files
    create_directory_structure
    generate_oosrc "${base_url}" "${model}"
    generate_runner

    if ${create_global}; then
        create_global_launcher
    fi

    echo
    success "ZAI runner setup complete!"
    echo
    echo "Next steps:"
    echo "  1. Store your ZAI key: ${SCRIPT_DIR}/secrets.sh store <your_key>"
    echo "  2. Test your setup: .agents/runners/run_zai.sh --model ${model}"
    echo "  3. Run diagnostics: ${SCRIPT_DIR}/oos-doctor"
    echo
    echo "Usage:"
    echo "  Project-specific: .agents/runners/run_zai.sh"
    echo "  Global: claude-zai"
    echo "  Status test: claude-zai -p '/status'"
}

# Run main function
main "$@"